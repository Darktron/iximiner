//
// Created by Haifa Bogdan Adnan on 06/08/2018.
//

#include "../../../common/common.h"

#include "opencl_kernel.h"

string opencl_kernel = "#define ITEMS_PER_SEGMENT               32\n"
					   "#define BLOCK_SIZE_ULONG                128\n"
					   "#define CBLOCKS_MEMSIZE\t\t\t\t\t96995\n"
					   "#define GBLOCKS_MEMSIZE\t\t\t\t\t16384\n"
					   "#define CBLOCKS_REFSIZE\t\t\t\t\t524286\n"
					   "\n"
					   "#define fBlaMka(x, y) ((x) + (y) + 2 * upsample(mul_hi((uint)(x), (uint)(y)), (uint)(x) * (uint)y))\n"
					   "\n"
					   "#define COMPUTE \\\n"
					   "    a = fBlaMka(a, b);          \\\n"
					   "    d = rotate(d ^ a, (ulong)32);      \\\n"
					   "    c = fBlaMka(c, d);          \\\n"
					   "    b = rotate(b ^ c, (ulong)40);      \\\n"
					   "    a = fBlaMka(a, b);          \\\n"
					   "    d = rotate(d ^ a, (ulong)48);      \\\n"
					   "    c = fBlaMka(c, d);          \\\n"
					   "    b = rotate(b ^ c, (ulong)1);\n"
					   "\n"
					   "__constant char offsets_round_1[32][4] = {\n"
					   "        { 0, 4, 8, 12 },\n"
					   "        { 1, 5, 9, 13 },\n"
					   "        { 2, 6, 10, 14 },\n"
					   "        { 3, 7, 11, 15 },\n"
					   "        { 16, 20, 24, 28 },\n"
					   "        { 17, 21, 25, 29 },\n"
					   "        { 18, 22, 26, 30 },\n"
					   "        { 19, 23, 27, 31 },\n"
					   "        { 32, 36, 40, 44 },\n"
					   "        { 33, 37, 41, 45 },\n"
					   "        { 34, 38, 42, 46 },\n"
					   "        { 35, 39, 43, 47 },\n"
					   "        { 48, 52, 56, 60 },\n"
					   "        { 49, 53, 57, 61 },\n"
					   "        { 50, 54, 58, 62 },\n"
					   "        { 51, 55, 59, 63 },\n"
					   "        { 64, 68, 72, 76 },\n"
					   "        { 65, 69, 73, 77 },\n"
					   "        { 66, 70, 74, 78 },\n"
					   "        { 67, 71, 75, 79 },\n"
					   "        { 80, 84, 88, 92 },\n"
					   "        { 81, 85, 89, 93 },\n"
					   "        { 82, 86, 90, 94 },\n"
					   "        { 83, 87, 91, 95 },\n"
					   "        { 96, 100, 104, 108 },\n"
					   "        { 97, 101, 105, 109 },\n"
					   "        { 98, 102, 106, 110 },\n"
					   "        { 99, 103, 107, 111 },\n"
					   "        { 112, 116, 120, 124 },\n"
					   "        { 113, 117, 121, 125 },\n"
					   "        { 114, 118, 122, 126 },\n"
					   "        { 115, 119, 123, 127 },\n"
					   "};\n"
					   "\n"
					   "__constant char offsets_round_2[32][4] = {\n"
					   "        { 0, 5, 10, 15 },\n"
					   "        { 1, 6, 11, 12 },\n"
					   "        { 2, 7, 8, 13 },\n"
					   "        { 3, 4, 9, 14 },\n"
					   "        { 16, 21, 26, 31 },\n"
					   "        { 17, 22, 27, 28 },\n"
					   "        { 18, 23, 24, 29 },\n"
					   "        { 19, 20, 25, 30 },\n"
					   "        { 32, 37, 42, 47 },\n"
					   "        { 33, 38, 43, 44 },\n"
					   "        { 34, 39, 40, 45 },\n"
					   "        { 35, 36, 41, 46 },\n"
					   "        { 48, 53, 58, 63 },\n"
					   "        { 49, 54, 59, 60 },\n"
					   "        { 50, 55, 56, 61 },\n"
					   "        { 51, 52, 57, 62 },\n"
					   "        { 64, 69, 74, 79 },\n"
					   "        { 65, 70, 75, 76 },\n"
					   "        { 66, 71, 72, 77 },\n"
					   "        { 67, 68, 73, 78 },\n"
					   "        { 80, 85, 90, 95 },\n"
					   "        { 81, 86, 91, 92 },\n"
					   "        { 82, 87, 88, 93 },\n"
					   "        { 83, 84, 89, 94 },\n"
					   "        { 96, 101, 106, 111 },\n"
					   "        { 97, 102, 107, 108 },\n"
					   "        { 98, 103, 104, 109 },\n"
					   "        { 99, 100, 105, 110 },\n"
					   "        { 112, 117, 122, 127 },\n"
					   "        { 113, 118, 123, 124 },\n"
					   "        { 114, 119, 120, 125 },\n"
					   "        { 115, 116, 121, 126 },\n"
					   "};\n"
					   "\n"
					   "__constant char offsets_round_3[32][4] = {\n"
					   "        { 0, 32, 64, 96 },\n"
					   "        { 1, 33, 65, 97 },\n"
					   "        { 16, 48, 80, 112 },\n"
					   "        { 17, 49, 81, 113 },\n"
					   "        { 2, 34, 66, 98 },\n"
					   "        { 3, 35, 67, 99 },\n"
					   "        { 18, 50, 82, 114 },\n"
					   "        { 19, 51, 83, 115 },\n"
					   "        { 4, 36, 68, 100 },\n"
					   "        { 5, 37, 69, 101 },\n"
					   "        { 20, 52, 84, 116 },\n"
					   "        { 21, 53, 85, 117 },\n"
					   "        { 6, 38, 70, 102 },\n"
					   "        { 7, 39, 71, 103 },\n"
					   "        { 22, 54, 86, 118 },\n"
					   "        { 23, 55, 87, 119 },\n"
					   "        { 8, 40, 72, 104 },\n"
					   "        { 9, 41, 73, 105 },\n"
					   "        { 24, 56, 88, 120 },\n"
					   "        { 25, 57, 89, 121 },\n"
					   "        { 10, 42, 74, 106 },\n"
					   "        { 11, 43, 75, 107 },\n"
					   "        { 26, 58, 90, 122 },\n"
					   "        { 27, 59, 91, 123 },\n"
					   "        { 12, 44, 76, 108 },\n"
					   "        { 13, 45, 77, 109 },\n"
					   "        { 28, 60, 92, 124 },\n"
					   "        { 29, 61, 93, 125 },\n"
					   "        { 14, 46, 78, 110 },\n"
					   "        { 15, 47, 79, 111 },\n"
					   "        { 30, 62, 94, 126 },\n"
					   "        { 31, 63, 95, 127 },\n"
					   "};\n"
					   "\n"
					   "__constant char offsets_round_4[32][4] = {\n"
					   "        { 0, 33, 80, 113 },\n"
					   "        { 1, 48, 81, 96 },\n"
					   "        { 16, 49, 64, 97 },\n"
					   "        { 17, 32, 65, 112 },\n"
					   "        { 2, 35, 82, 115 },\n"
					   "        { 3, 50, 83, 98 },\n"
					   "        { 18, 51, 66, 99 },\n"
					   "        { 19, 34, 67, 114 },\n"
					   "        { 4, 37, 84, 117 },\n"
					   "        { 5, 52, 85, 100 },\n"
					   "        { 20, 53, 68, 101 },\n"
					   "        { 21, 36, 69, 116 },\n"
					   "        { 6, 39, 86, 119 },\n"
					   "        { 7, 54, 87, 102 },\n"
					   "        { 22, 55, 70, 103 },\n"
					   "        { 23, 38, 71, 118 },\n"
					   "        { 8, 41, 88, 121 },\n"
					   "        { 9, 56, 89, 104 },\n"
					   "        { 24, 57, 72, 105 },\n"
					   "        { 25, 40, 73, 120 },\n"
					   "        { 10, 43, 90, 123 },\n"
					   "        { 11, 58, 91, 106 },\n"
					   "        { 26, 59, 74, 107 },\n"
					   "        { 27, 42, 75, 122 },\n"
					   "        { 12, 45, 92, 125 },\n"
					   "        { 13, 60, 93, 108 },\n"
					   "        { 28, 61, 76, 109 },\n"
					   "        { 29, 44, 77, 124 },\n"
					   "        { 14, 47, 94, 127 },\n"
					   "        { 15, 62, 95, 110 },\n"
					   "        { 30, 63, 78, 111 },\n"
					   "        { 31, 46, 79, 126 },\n"
					   "};\n"
					   "\n"
					   "#define G1(data) \\\n"
					   "{ \\\n"
					   "\tbarrier(CLK_LOCAL_MEM_FENCE); \\\n"
					   "\ta = data[i1_0]; \\\n"
					   "\tb = data[i1_1]; \\\n"
					   "\tc = data[i1_2]; \\\n"
					   "\td = data[i1_3]; \\\n"
					   "\tCOMPUTE \\\n"
					   "\tdata[i1_1] = b; \\\n"
					   "    data[i1_2] = c; \\\n"
					   "    data[i1_3] = d; \\\n"
					   "    barrier(CLK_LOCAL_MEM_FENCE); \\\n"
					   "}\n"
					   "\n"
					   "#define G2(data) \\\n"
					   "{ \\\n"
					   "\tb = data[i2_1]; \\\n"
					   "\tc = data[i2_2]; \\\n"
					   "\td = data[i2_3]; \\\n"
					   "\tCOMPUTE \\\n"
					   "\tdata[i2_0] = a; \\\n"
					   "\tdata[i2_1] = b; \\\n"
					   "    data[i2_2] = c; \\\n"
					   "    data[i2_3] = d; \\\n"
					   "    barrier(CLK_LOCAL_MEM_FENCE); \\\n"
					   "}\n"
					   "\n"
					   "#define G3(data) \\\n"
					   "{ \\\n"
					   "\ta = data[i3_0]; \\\n"
					   "\tb = data[i3_1]; \\\n"
					   "\tc = data[i3_2]; \\\n"
					   "\td = data[i3_3]; \\\n"
					   "\tCOMPUTE \\\n"
					   "\tdata[i3_1] = b; \\\n"
					   "    data[i3_2] = c; \\\n"
					   "    data[i3_3] = d; \\\n"
					   "    barrier(CLK_LOCAL_MEM_FENCE); \\\n"
					   "}\n"
					   "\n"
					   "#define G4(data) \\\n"
					   "{ \\\n"
					   "\tb = data[i4_1]; \\\n"
					   "\tc = data[i4_2]; \\\n"
					   "\td = data[i4_3]; \\\n"
					   "\tCOMPUTE \\\n"
					   "\tdata[i4_0] = a; \\\n"
					   "\tdata[i4_1] = b; \\\n"
					   "    data[i4_2] = c; \\\n"
					   "    data[i4_3] = d; \\\n"
					   "    barrier(CLK_LOCAL_MEM_FENCE); \\\n"
					   "}\n"
					   "\n"
					   "__kernel void fill_cblocks(__global ulong *chunk_0,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_1,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_2,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_3,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_4,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_5,\n"
					   "\t\t\t\t\t\t__global ulong *seed,\n"
					   "\t\t\t\t\t\t__global ulong *out,\n"
					   "\t\t\t\t\t\t__global int *addresses,\n"
					   "\t\t\t\t\t\tint threads_per_chunk) {\n"
					   "\t__local ulong state[BLOCK_SIZE_ULONG];\n"
					   "\t__local int addr[64];\n"
					   "\tulong4 tmp;\n"
					   "\n"
					   "\tint hash = get_group_id(0);\n"
					   "\tint id = get_local_id(0);\n"
					   "\tint offset = id * 4;\n"
					   "\n"
					   "\tulong chunks[4];\n"
					   "\tchunks[0] = (ulong)chunk_0;\n"
					   "\tchunks[1] = (ulong)chunk_1;\n"
					   "\tchunks[2] = (ulong)chunk_2;\n"
					   "\tchunks[3] = (ulong)chunk_3;\n"
					   "//\tchunks[4] = (ulong)chunk_4;\n"
					   "//\tchunks[5] = (ulong)chunk_5;\n"
					   "\tint chunk_index = hash / threads_per_chunk;\n"
					   "\tint chunk_offset = hash - chunk_index * threads_per_chunk;\n"
					   "\t__global ulong *memory = (__global ulong *)chunks[chunk_index] + chunk_offset * CBLOCKS_MEMSIZE * BLOCK_SIZE_ULONG;\n"
					   "\n"
					   "\tulong a, b, c, d;\n"
					   "\n"
					   "\tint i1_0 = offsets_round_1[id][0];\n"
					   "\tint i1_1 = offsets_round_1[id][1];\n"
					   "\tint i1_2 = offsets_round_1[id][2];\n"
					   "\tint i1_3 = offsets_round_1[id][3];\n"
					   "\n"
					   "\tint i2_0 = offsets_round_2[id][0];\n"
					   "\tint i2_1 = offsets_round_2[id][1];\n"
					   "\tint i2_2 = offsets_round_2[id][2];\n"
					   "\tint i2_3 = offsets_round_2[id][3];\n"
					   "\n"
					   "\tint i3_0 = offsets_round_3[id][0];\n"
					   "\tint i3_1 = offsets_round_3[id][1];\n"
					   "\tint i3_2 = offsets_round_3[id][2];\n"
					   "\tint i3_3 = offsets_round_3[id][3];\n"
					   "\n"
					   "\tint i4_0 = offsets_round_4[id][0];\n"
					   "\tint i4_1 = offsets_round_4[id][1];\n"
					   "\tint i4_2 = offsets_round_4[id][2];\n"
					   "\tint i4_3 = offsets_round_4[id][3];\n"
					   "\n"
					   "\t__global ulong *out_mem = out + hash * 2 * BLOCK_SIZE_ULONG;\n"
					   "\t__global ulong *seed_mem = seed + hash * 2 * BLOCK_SIZE_ULONG;\n"
					   "\n"
					   "\tvstore4(vload4(0, seed_mem + offset), 0, memory + offset);\n"
					   "\tseed_mem += BLOCK_SIZE_ULONG;\n"
					   "\tvstore4(vload4(0, seed_mem + offset), 0, memory + BLOCK_SIZE_ULONG + offset);\n"
					   "\n"
					   "\t__global int *stop_addr = addresses + CBLOCKS_REFSIZE * 2;\n"
					   "\n"
					   "\ttmp = vload4(0, seed_mem + offset);\n"
					   "\n"
					   "\tfor(; addresses < stop_addr; addresses += 64) {\n"
					   "\t\taddr[id] = addresses[id];\n"
					   "\t\taddr[id + 32] = addresses[id + 32];\n"
					   "\n"
					   "\t\tuint i_limit = (stop_addr - addresses) >> 1;\n"
					   "\t\tif(i_limit > 32) i_limit = 32;\n"
					   "\n"
					   "\t\tfor(int i=0;i<i_limit;i++) {\n"
					   "\t\t\tint addr0 = addr[i];\n"
					   "\n"
					   "\t\t\ttmp ^= vload4(0, memory + addr[i + 32] * BLOCK_SIZE_ULONG + offset);\n"
					   "\t\t\tvstore4(tmp, 0, state + offset);\n"
					   "\n"
					   "\t\t\tG1(state);\n"
					   "\t\t\tG2(state);\n"
					   "\t\t\tG3(state);\n"
					   "\t\t\tG4(state);\n"
					   "\n"
					   "\t\t\ttmp ^= vload4(0, state + offset);\n"
					   "\n"
					   "\t\t\tif (addr0 != -1)\n"
					   "\t\t\t\tvstore4(tmp, 0, memory + addr0 * BLOCK_SIZE_ULONG + offset);\n"
					   "\t\t}\n"
					   "\t}\n"
					   "\tvstore4(tmp, 0, out_mem + offset);\n"
					   "};\n"
					   "\n"
					   "__kernel void fill_gblocks(__global ulong *chunk_0,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_1,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_2,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_3,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_4,\n"
					   "\t\t\t\t\t\t__global ulong *chunk_5,\n"
					   "\t\t\t\t\t\t__global ulong *seed,\n"
					   "\t\t\t\t\t\t__global ulong *out,\n"
					   "\t\t\t\t\t\t__global int *addresses,\n"
					   "\t\t\t\t\t\t__global int *segments,\n"
					   "\t\t\t\t\t\tint threads_per_chunk) {\n"
					   "\t__local ulong scratchpad[4 * BLOCK_SIZE_ULONG];\n"
					   "\tulong4 tmp;\n"
					   "\tulong a, b, c, d;\n"
					   "\n"
					   "\tint hash = get_group_id(0);\n"
					   "\tint local_id = get_local_id(0);\n"
					   "\n"
					   "\tint id = local_id % ITEMS_PER_SEGMENT;\n"
					   "\tint segment = local_id / ITEMS_PER_SEGMENT;\n"
					   "\tint offset = id * 4;\n"
					   "\n"
					   "\tulong chunks[6];\n"
					   "\tchunks[0] = (ulong)chunk_0;\n"
					   "\tchunks[1] = (ulong)chunk_1;\n"
					   "\tchunks[2] = (ulong)chunk_2;\n"
					   "\tchunks[3] = (ulong)chunk_3;\n"
					   "\tchunks[4] = (ulong)chunk_4;\n"
					   "\tchunks[5] = (ulong)chunk_5;\n"
					   "\tint chunk_index = hash / threads_per_chunk;\n"
					   "\tint chunk_offset = hash - chunk_index * threads_per_chunk;\n"
					   "\t__global ulong *memory = (__global ulong *)chunks[chunk_index] + chunk_offset * GBLOCKS_MEMSIZE * BLOCK_SIZE_ULONG;\n"
					   "\n"
					   "\tint i1_0 = offsets_round_1[id][0];\n"
					   "\tint i1_1 = offsets_round_1[id][1];\n"
					   "\tint i1_2 = offsets_round_1[id][2];\n"
					   "\tint i1_3 = offsets_round_1[id][3];\n"
					   "\n"
					   "\tint i2_0 = offsets_round_2[id][0];\n"
					   "\tint i2_1 = offsets_round_2[id][1];\n"
					   "\tint i2_2 = offsets_round_2[id][2];\n"
					   "\tint i2_3 = offsets_round_2[id][3];\n"
					   "\n"
					   "\tint i3_0 = offsets_round_3[id][0];\n"
					   "\tint i3_1 = offsets_round_3[id][1];\n"
					   "\tint i3_2 = offsets_round_3[id][2];\n"
					   "\tint i3_3 = offsets_round_3[id][3];\n"
					   "\n"
					   "\tint i4_0 = offsets_round_4[id][0];\n"
					   "\tint i4_1 = offsets_round_4[id][1];\n"
					   "\tint i4_2 = offsets_round_4[id][2];\n"
					   "\tint i4_3 = offsets_round_4[id][3];\n"
					   "\n"
					   "\t__global ulong *out_mem = out + hash * 8 * BLOCK_SIZE_ULONG;\n"
					   "\t__global ulong *seed_mem = seed + hash * 8 * BLOCK_SIZE_ULONG + segment * 2 * BLOCK_SIZE_ULONG;\n"
					   "\n"
					   "\t__global ulong *seed_dst = memory + segment * 4096 * BLOCK_SIZE_ULONG;\n"
					   "\n"
					   "\tvstore4(vload4(0, seed_mem + offset), 0, seed_dst + offset);\n"
					   "\n"
					   "\tseed_mem += BLOCK_SIZE_ULONG;\n"
					   "\tseed_dst += BLOCK_SIZE_ULONG;\n"
					   "\n"
					   "\tvstore4(vload4(0, seed_mem + offset), 0, seed_dst + offset);\n"
					   "\n"
					   "\t__global ulong *next_block;\n"
					   "\t__global ulong *prev_block;\n"
					   "\t__global ulong *ref_block;\n"
					   "\n"
					   "\t__local ulong *state = scratchpad + segment * BLOCK_SIZE_ULONG;\n"
					   "\n"
					   "\tsegments += segment;\n"
					   "\tint inc = 1022;\n"
					   "\n"
					   "\tfor(int s=0; s<16; s++) {\n"
					   "\t\t__global ushort *curr_seg = (__global ushort *)(segments + s * 4);\n"
					   "\n"
					   "\t\tushort addr_start_idx = curr_seg[0];\n"
					   "\t\tushort prev_blk_idx = curr_seg[1];\n"
					   "\n"
					   "\t\t__global short *start_addr = (__global short *)(addresses + addr_start_idx);\n"
					   "\t\t__global short *stop_addr = (__global short *)(addresses + addr_start_idx + inc);\n"
					   "\t\tinc = 1024;\n"
					   "\n"
					   "\t\tprev_block = memory + prev_blk_idx * BLOCK_SIZE_ULONG;\n"
					   "\n"
					   "\t\ttmp = vload4(0, prev_block + offset);\n"
					   "\t\tulong4 ref = 0, next = 0;\n"
					   "\t\tulong4 nextref = 0;\n"
					   "\t\tref = vload4(0, memory + start_addr[1] * BLOCK_SIZE_ULONG + offset);\n"
					   "\n"
					   "\t\tfor(; start_addr < stop_addr; start_addr+=2) {\n"
					   "\t\t\tshort addr0 = start_addr[0];\n"
					   "\t\t\tnext_block = memory + addr0 * BLOCK_SIZE_ULONG;\n"
					   "\n"
					   "\t\t\tif(s >= 4)\n"
					   "\t\t\t\tnext = vload4(0, next_block + offset);\n"
					   "\n"
					   "\t\t\tif(start_addr + 2 < stop_addr)\n"
					   "\t\t\t\tnextref = vload4(0, memory + start_addr[3] * BLOCK_SIZE_ULONG + offset);\n"
					   "\n"
					   "\t\t\ttmp ^= ref;\n"
					   "\t\t\tvstore4(tmp, 0, state + offset);\n"
					   "\n"
					   "\t\t\tG1(state);\n"
					   "\t\t\tG2(state);\n"
					   "\t\t\tG3(state);\n"
					   "\t\t\tG4(state);\n"
					   "\n"
					   "\t\t\tif(s >= 4)\n"
					   "\t\t\t\ttmp ^= next;\n"
					   "\n"
					   "\t\t\ttmp ^= vload4(0, state + offset);\n"
					   "\t\t\tvstore4(tmp, 0, next_block + offset);\n"
					   "\t\t\tbarrier(CLK_GLOBAL_MEM_FENCE);\n"
					   "\n"
					   "\t\t\tref = nextref;\n"
					   "\t\t}\n"
					   "\t}\n"
					   "\n"
					   "\t__global short *out_addr = (__global short *)(addresses + 65528);\n"
					   "\n"
					   "\tulong out_data = (memory + out_addr[0] * BLOCK_SIZE_ULONG)[local_id];\n"
					   "\tout_data ^= (memory + out_addr[1] * BLOCK_SIZE_ULONG)[local_id];\n"
					   "\tout_data ^= (memory + out_addr[3] * BLOCK_SIZE_ULONG)[local_id];\n"
					   "\tout_data ^= (memory + out_addr[5] * BLOCK_SIZE_ULONG)[local_id];\n"
					   "\n"
					   "\tout_mem[local_id] = out_data;\n"
					   "};";
